     1                                      BOOT_LOAD equ 0x7C00        ; ブートプログラムのロード位置
     2                                      ORG BOOT_LOAD               ; ロードアドレスをアセンブラに指示
     3                                  ;;;
     4                                  ;;; マクロ
     5                                  ;;;
     6                                      %include "../include/macros.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1>     %rep %0 - 1
     3                              <1>     push %{-1:-1}
     4                              <1>     %rotate - 1
     5                              <1>     %endrep
     6                              <1>     %rotate -1
     7                              <1>     call %1
     8                              <1> 
     9                              <1>     %if 1 < %0
    10                              <1>     add sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <1>     %endif
    12                              <1> %endmacro
     7                                  
     8                                  ;;;
     9                                  ;;; エントリポイント
    10                                  ;;;
    11                                  entry:
    12 00000000 EB58                        jmp ipl                       ; IPLへジャンプ
    13                                  
    14                                      ;; BPB(BIOS Prameter Block)
    15 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    16                                  
    17                                      ;; IPL (Initial Program Loader)
    18                                  ipl:
    19 0000005A FA                          cli                        ; 割り込み禁止
    20                                  
    21 0000005B B80000                      mov ax, 0x0000              ; AX = 0x0000;
    22 0000005E 8ED8                        mov ds, ax                  ; DS = 0x0000;
    23 00000060 8EC0                        mov es, ax                  ; ES = 0x0000;
    24 00000062 8ED0                        mov ss, ax                  ; SS = 0x0000;
    25 00000064 BC007C                      mov sp, BOOT_LOAD           ; SP = 0x7C00;
    26                                  
    27 00000067 FB                          sti                        ; 割り込み許可
    28                                  
    29 00000068 8816[9200]                  mov [BOOT.DRIVE], dl       ; ブートドライブを保存
    30                                  
    31                                      ;; 文字を表示
    32 0000006C 68[7A00]E8220083C4-         cdecl puts, .s0             ; puts(.s0);
    32 00000074 02                 
    33                                  
    34                                      ;; reboot
    35 00000075 E8BB00                      cdecl reboot                ; 戻ってこない
    36                                  
    37 00000078 EBFE                        jmp $                       ; while(1)
    38                                  
    39 0000007A 426F6F74696E672E2E-         .s0: db "Booting...", 0x0A, 0x0D, 0
    39 00000083 2E0A0D00           
    40 00000087 2D2D2D2D2D2D2D2D0A-         .s1: db "--------", 0x0A, 0x0D, 0
    40 00000090 0D00               
    41                                      ALIGN 2, db 0
    42                                  BOOT:                           ; ブートドライブに関する情報
    43 00000092 0000                        .DRIVE: dw 0                ; ドライブ番号
    44                                  
    45                                  
    46                                  ;;;
    47                                  ;;; モジュール
    48                                  ;;;
    49                                      %include "../modules/real/puts.s"
     1                              <1> ;;; 文字列の表示
     2                              <1> ;;; @fn puts(str);
     3                              <1> ;;; @param str the address of string
     4                              <1> ;;; @return nothing
     5                              <1> 
     6                              <1> puts:
     7                              <1>     ;; スタックフレームの構築
     8 00000094 55                  <1>     push bp
     9 00000095 89E5                <1>     mov bp, sp
    10                              <1>     ;; レジスタの保存
    11 00000097 50                  <1>     push ax
    12 00000098 53                  <1>     push bx
    13 00000099 56                  <1>     push si
    14                              <1> 
    15 0000009A 8B7604              <1>     mov si, [bp + 4]            ; SI = the address of string
    16                              <1> 
    17                              <1>     ;; 関数本体
    18 0000009D B40E                <1>     mov ah, 0x0E
    19 0000009F BB0000              <1>     mov bx, 0x0000
    20                              <1> 
    21 000000A2 FC                  <1>     cld                         ; DF = 0;
    22                              <1>                                 ; do {
    23                              <1>     .10L:                       ;    AL = *SI++;
    24 000000A3 AC                  <1>     lodsb                       ;    if (0 == AL) break;
    25                              <1>                                 ;    Int10(0x0E, AL);
    26 000000A4 3C00                <1>     cmp al, 0                   ; } while(1);
    27 000000A6 7404                <1>     je .10E
    28                              <1> 
    29 000000A8 CD10                <1>     int 0x10
    30 000000AA EBF7                <1>     jmp .10L
    31                              <1> 
    32                              <1>     .10E:
    33                              <1>     ;; レジスタの復帰
    34 000000AC 5E                  <1>     pop si
    35 000000AD 5B                  <1>     pop bx
    36 000000AE 58                  <1>     pop ax
    37                              <1>     ;; スタックフレームの破棄
    38 000000AF 89EC                <1>     mov sp, bp
    39 000000B1 5D                  <1>     pop bp
    40                              <1> 
    41 000000B2 C3                  <1>     ret
    50                                      %include "../modules/real/itoa.s"
     1                              <1> ;;; 数値を文字列に変換する
     2                              <1> ;;; @fn  void itoa(num,  buff, size, radix, flag)
     3                              <1> ;;; @param num 変換する値
     4                              <1> ;;; @param buff 保存先バッファアドレス
     5                              <1> ;;; @param size 保存先バッファサイズ
     6                              <1> ;;; @param radix 2, 8, 10 or 16
     7                              <1> ;;; @param flag
     8                              <1> ;;;        B2: 空白をゼロで埋める
     9                              <1> ;;;        B1: '+/-' 記号を付加する
    10                              <1> ;;;        B0: 値を符号付き変数として扱う
    11                              <1> 
    12                              <1> itoa:
    13                              <1>     ;; スタックフレームの構築
    14 000000B3 55                  <1>     push bp                     ;   +12| flag
    15 000000B4 89E5                <1>     mov bp, sp                  ;   +10| radix
    16                              <1>                                 ;   + 8| buff size
    17                              <1>                                 ;   + 6| buff address
    18                              <1>                                 ;   + 4| num
    19                              <1>                                 ;   + 2| IP
    20                              <1>                                 ; BP+ 0| BP
    21                              <1>                                 ; -----+-------------
    22                              <1> 
    23                              <1>     ;; レジスタの保存
    24 000000B6 50                  <1>     push	ax
    25 000000B7 53                  <1> 	push	bx
    26 000000B8 51                  <1> 	push	cx
    27 000000B9 52                  <1> 	push	dx
    28 000000BA 56                  <1> 	push	si
    29 000000BB 57                  <1> 	push	di
    30                              <1> 
    31                              <1>     ;; 引数の取得
    32 000000BC 8B4604              <1>     mov		ax, [bp + 4]					; val  = 数値;
    33 000000BF 8B7606              <1> 	mov		si, [bp + 6]					; dst  = バッファアドレス;
    34 000000C2 8B4E08              <1> 	mov		cx, [bp + 8]					; size = 残りバッファサイズ;
    35                              <1> 
    36 000000C5 89F7                <1> 	mov		di, si							; // バッファの最後尾
    37 000000C7 01CF                <1> 	add		di, cx							; dst  = &dst[size - 1];
    38 000000C9 4F                  <1> 	dec		di								;
    39                              <1> 
    40 000000CA 8B5E0C              <1> 	mov		bx, [bp +12]					; flags = オプション;
    41                              <1> 
    42                              <1>     ;; 符号付き判定
    43 000000CD F7C30100            <1>     test bx, 0b0001             ; if (flags & 0b01) {
    44                              <1>                                 ;   if (val > 0) {
    45                              <1>     .10Q:                       ;     flag |= 2;
    46 000000D1 7408                <1>     je .10E                     ;   }
    47 000000D3 83F800              <1>     cmp ax, 0                   ; }
    48                              <1> 
    49                              <1>     .12Q:
    50 000000D6 7D03                <1>     jge .12E
    51 000000D8 83CB02              <1>     or bx, 0b0010
    52                              <1> 
    53                              <1>     .12E:
    54                              <1>     .10E:
    55                              <1> 
    56                              <1>     ;; 符号出力判定
    57 000000DB F7C30200            <1>     test bx, 0b0010             ; if (flag & 0x02) {
    58                              <1>                                 ;   if (val > 0) {
    59                              <1>     .20Q:                       ;      val *= -1;
    60 000000DF 7410                <1>     je .20E                     ;      *dst = '-';
    61 000000E1 83F800              <1>     cmp ax, 0                   ;   } else {
    62                              <1>                                 ;      *dst = '+';
    63                              <1>     .22Q:                       ;   }
    64 000000E4 7D07                <1>     jge .22F                    ;
    65 000000E6 F7D8                <1>     neg ax                      ;   size--;
    66 000000E8 C6042D              <1>     mov [si], byte '-'          ; }
    67 000000EB EB03                <1>     jmp .22E
    68                              <1> 
    69                              <1>     .22F:
    70 000000ED C6042B              <1>     mov [si], byte '+'
    71                              <1> 
    72                              <1>     .22E:
    73 000000F0 49                  <1>     dec cx
    74                              <1> 
    75                              <1>     .20E:
    76                              <1> 
    77                              <1>     ;; ASCII 変換
    78 000000F1 8B5E0A              <1>     mov bx, [bp + 10]           ; BX = radix
    79                              <1>                                 ;
    80                              <1>     .30L:                       ; do {
    81 000000F4 BA0000              <1>     mov dx, 0                   ;  DX = DX:AX % radix;
    82 000000F7 F7F3                <1>     div bx                      ;  AX = DX:AX / radix;
    83                              <1>                                 ;
    84 000000F9 89D6                <1>     mov si, dx                  ;
    85 000000FB 8A94[2301]          <1>     mov dl, byte [.ascii + si]  ;  DL = ASCII[DX];
    86 000000FF 8815                <1>     mov [di], dl                ;  *dst = DL;
    87 00000101 4F                  <1>     dec di                      ;   dst--;
    88                              <1>                                 ;
    89 00000102 83F800              <1>     cmp ax, 0                   ;
    90 00000105 E0ED                <1>     loopnz .30L                 ; } while (AX);
    91                              <1> 
    92                              <1>     .30E:
    93                              <1> 
    94                              <1>     ;; 空白を埋める
    95 00000107 83F900              <1>     cmp cx, 0                   ; if (size) {
    96                              <1>                                 ;
    97                              <1>     .40Q:                       ;
    98 0000010A 740D                <1>     je .40E                     ;
    99 0000010C B020                <1>     mov al, ' '                 ;    AL = ' '
   100 0000010E 837E0C04            <1>     cmp [bp + 12], word 0b0100  ;    if (flag & 0x04) {
   101                              <1>                                 ;
   102                              <1>     .42Q:                       ;
   103 00000112 7502                <1>     jne .42E                    ;
   104 00000114 B030                <1>     mov al, '0'                 ;       AL = '0';
   105                              <1>                                 ;    }
   106                              <1>     .42E:                       ;
   107 00000116 FD                  <1>     std                         ;    DF = 1
   108 00000117 F3AA                <1>     rep stosb                   ;    while (--cx) *DI-- = ' ';
   109                              <1>                                 ;
   110                              <1>     .40E:                       ; }
   111                              <1> 
   112                              <1>     ;; レジスタの復帰
   113 00000119 5F                  <1> 	pop		di
   114 0000011A 5E                  <1> 	pop		si
   115 0000011B 5A                  <1> 	pop		dx
   116 0000011C 59                  <1> 	pop		cx
   117 0000011D 5B                  <1> 	pop		bx
   118 0000011E 58                  <1> 	pop		ax
   119                              <1> 
   120                              <1>     ;; スタックフレームの破棄
   121 0000011F 89EC                <1> 	mov		sp, bp
   122 00000121 5D                  <1> 	pop		bp
   123                              <1> 
   124 00000122 C3                  <1> 	ret
   125                              <1> 
   126                              <1> 
   127 00000123 303132333435363738- <1>     .ascii db "0123456789ABCDEF" ; 変換テーブル
   127 0000012C 39414243444546      <1>
    51                                      %include "../modules/real/reboot.s"
     1                              <1> ;;; メッセージを表示して再起動を行う
     2                              <1> ;;; void reboot(void);
     3                              <1> ;;;
     4                              <1> reboot:
     5                              <1>     ;; メッセージを表示
     6 00000133 68[4F01]E85BFF83C4- <1>     cdecl puts, .s0
     6 0000013B 02                  <1>
     7                              <1> 
     8                              <1>     ;; キー入力待ち
     9                              <1>     .10L:
    10 0000013C B410                <1>     mov ah, 0x10
    11 0000013E CD16                <1>     int 0x16
    12                              <1> 
    13 00000140 3C20                <1>     cmp al, ' '
    14 00000142 75F8                <1>     jne .10L
    15                              <1> 
    16                              <1>     ;; 改行を出力
    17 00000144 68[6D01]E84AFF83C4- <1>     cdecl puts, .s1
    17 0000014C 02                  <1>
    18                              <1> 
    19                              <1>     ;; 再起動
    20 0000014D CD19                <1>     int 0x19                    ; BIOS(0x19) reboot();
    21                              <1> 
    22                              <1>     ;; 文字列データ
    23 0000014F 0A0D50757368205350- <1>     .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    23 00000158 414345206B65792074- <1>
    23 00000161 6F207265626F6F742E- <1>
    23 0000016A 2E2E00              <1>
    24 0000016D 0A0D0A0D00          <1>     .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    52                                  ;;;
    53                                  ;;; ブートフラグ(先頭 512 バイトの終了)
    54                                  ;;;
    55 00000172 00<rept>                    times 510 - ($ - $$) db 0x00
    56 000001FE 55AA                        db 0x55, 0xAA
