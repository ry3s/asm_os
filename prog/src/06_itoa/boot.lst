     1                                      %include "../include/macros.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1>     %rep %0 - 1
     3                              <1>     push %{-1:-1}
     4                              <1>     %rotate - 1
     5                              <1>     %endrep
     6                              <1>     %rotate -1
     7                              <1>     call %1
     8                              <1> 
     9                              <1>     %if 1 < %0
    10                              <1>     add sp, (__BITS__ >> 3) * (%0 - 1)
    11                              <1>     %endif
    12                              <1> %endmacro
     2                                  ;;;
     3                                  ;;; エントリポイント
     4                                  ;;;
     5                                      BOOT_LOAD equ 0x7C00        ; ブートプログラムのロード位置
     6                                      ORG BOOT_LOAD               ; ロードアドレスをアセンブラに指示
     7                                  entry:
     8 00000000 EB58                        jmp ipl                       ; IPLへジャンプ
     9                                  
    10                                      ;; BPB(BIOS Prameter Block)
    11 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    12                                  
    13                                      ;; IPL (Initial Program Loader)
    14                                  ipl:
    15 0000005A FA                          cli                        ; 割り込み禁止
    16                                  
    17 0000005B B80000                      mov ax, 0x0000              ; AX = 0x0000;
    18 0000005E 8ED8                        mov ds, ax                  ; DS = 0x0000;
    19 00000060 8EC0                        mov es, ax                  ; ES = 0x0000;
    20 00000062 8ED0                        mov ss, ax                  ; SS = 0x0000;
    21 00000064 BC007C                      mov sp, BOOT_LOAD           ; SP = 0x7C00;
    22                                  
    23 00000067 FB                          sti                        ; 割り込み許可
    24                                  
    25 00000068 8816[4801]                  mov [BOOT.DRIVE], dl       ; ブートドライブを保存
    26                                  
    27                                      ;; 文字を表示
    28 0000006C 68[3001]E8D80083C4-         cdecl puts, .s0             ; puts(.s0);
    28 00000074 02                 
    29                                  
    30 00000075 6A016A0A6A0868-             cdecl	itoa,  8086, .s1, 8, 10, 0b0001	; "    8086"
    30 0000007C [3D01]68961FE8E500-
    30 00000084 83C40A             
    31 00000087 68[3D01]E8BD0083C4-     	cdecl	puts, .s1
    31 0000008F 02                 
    32                                  
    33 00000090 6A036A0A6A0868-         	cdecl	itoa,  8086, .s1, 8, 10, 0b0011	; "+   8086"
    33 00000097 [3D01]68961FE8CA00-
    33 0000009F 83C40A             
    34 000000A2 68[3D01]E8A20083C4-     	cdecl	puts, .s1
    34 000000AA 02                 
    35                                  
    36 000000AB 6A016A0A6A0868-         	cdecl	itoa, -8086, .s1, 8, 10, 0b0001	; "-   8086"
    36 000000B2 [3D01]686AE0E8AF00-
    36 000000BA 83C40A             
    37 000000BD 68[3D01]E8870083C4-     	cdecl	puts, .s1
    37 000000C5 02                 
    38                                  
    39 000000C6 6A016A0A6A0868-         	cdecl	itoa,    -1, .s1, 8, 10, 0b0001	; "-      1"
    39 000000CD [3D01]6AFFE8950083-
    39 000000D5 C40A               
    40 000000D7 68[3D01]E86D0083C4-     	cdecl	puts, .s1
    40 000000DF 02                 
    41                                  
    42 000000E0 6A006A0A6A0868-         	cdecl	itoa,    -1, .s1, 8, 10, 0b0000	; "   65535"
    42 000000E7 [3D01]6AFFE87B0083-
    42 000000EF C40A               
    43 000000F1 68[3D01]E8530083C4-     	cdecl	puts, .s1
    43 000000F9 02                 
    44                                  
    45 000000FA 6A006A106A0868-         	cdecl	itoa,    -1, .s1, 8, 16, 0b0000	; "    FFFF"
    45 00000101 [3D01]6AFFE8610083-
    45 00000109 C40A               
    46 0000010B 68[3D01]E8390083C4-     	cdecl	puts, .s1
    46 00000113 02                 
    47                                  
    48 00000114 6A046A026A0868-         	cdecl	itoa,    12, .s1, 8,  2, 0b0100	; "00001100"
    48 0000011B [3D01]6A0CE8470083-
    48 00000123 C40A               
    49 00000125 68[3D01]E81F0083C4-     	cdecl	puts, .s1
    49 0000012D 02                 
    50                                  
    51 0000012E EBFE                        jmp $                       ; while(1)
    52                                  
    53 00000130 426F6F74696E672E2E-         .s0: db "Booting...", 0x0A, 0x0D, 0
    53 00000139 2E0A0D00           
    54 0000013D 2D2D2D2D2D2D2D2D0A-         .s1: db "--------", 0x0A, 0x0D, 0
    54 00000146 0D00               
    55                                      ALIGN 2, db 0
    56                                  BOOT:                           ; ブートドライブに関する情報
    57 00000148 0000                        .DRIVE: dw 0                ; ドライブ番号
    58                                  
    59                                  
    60                                  ;;;
    61                                  ;;; モジュール
    62                                  ;;;
    63                                      %include "../modules/real/puts.s"
     1                              <1> ;;; 文字列の表示
     2                              <1> ;;; @fn puts(str);
     3                              <1> ;;; @param str the address of string
     4                              <1> ;;; @return nothing
     5                              <1> 
     6                              <1> puts:
     7                              <1>     ;; スタックフレームの構築
     8 0000014A 55                  <1>     push bp
     9 0000014B 89E5                <1>     mov bp, sp
    10                              <1>     ;; レジスタの保存
    11 0000014D 50                  <1>     push ax
    12 0000014E 53                  <1>     push bx
    13 0000014F 56                  <1>     push si
    14                              <1> 
    15 00000150 8B7604              <1>     mov si, [bp + 4]            ; SI = the address of string
    16                              <1> 
    17                              <1>     ;; 関数本体
    18 00000153 B40E                <1>     mov ah, 0x0E
    19 00000155 BB0000              <1>     mov bx, 0x0000
    20                              <1> 
    21 00000158 FC                  <1>     cld                         ; DF = 0;
    22                              <1>                                 ; do {
    23                              <1>     .10L:                       ;    AL = *SI++;
    24 00000159 AC                  <1>     lodsb                       ;    if (0 == AL) break;
    25                              <1>                                 ;    Int10(0x0E, AL);
    26 0000015A 3C00                <1>     cmp al, 0                   ; } while(1);
    27 0000015C 7404                <1>     je .10E
    28                              <1> 
    29 0000015E CD10                <1>     int 0x10
    30 00000160 EBF7                <1>     jmp .10L
    31                              <1> 
    32                              <1>     .10E:
    33                              <1>     ;; レジスタの復帰
    34 00000162 5E                  <1>     pop si
    35 00000163 5B                  <1>     pop bx
    36 00000164 58                  <1>     pop ax
    37                              <1>     ;; スタックフレームの破棄
    38 00000165 89EC                <1>     mov sp, bp
    39 00000167 5D                  <1>     pop bp
    40                              <1> 
    41 00000168 C3                  <1>     ret
    64                                      %include "../modules/itoa.s"
     1                              <1> ;;; 数値を文字列に変換する
     2                              <1> ;;; @fn  void itoa(num,  buff, size, radix, flag)
     3                              <1> ;;; @param num 変換する値
     4                              <1> ;;; @param buff 保存先バッファアドレス
     5                              <1> ;;; @param size 保存先バッファサイズ
     6                              <1> ;;; @param radix 2, 8, 10 or 16
     7                              <1> ;;; @param flag
     8                              <1> ;;;        B2: 空白をゼロで埋める
     9                              <1> ;;;        B1: '+/-' 記号を付加する
    10                              <1> ;;;        B0: 値を符号付き変数として扱う
    11                              <1> 
    12                              <1> itoa:
    13                              <1>     ;; スタックフレームの構築
    14 00000169 55                  <1>     push bp                     ;   +12| flag
    15 0000016A 89E5                <1>     mov bp, sp                  ;   +10| radix
    16                              <1>                                 ;   + 8| buff size
    17                              <1>                                 ;   + 6| buff address
    18                              <1>                                 ;   + 4| num
    19                              <1>                                 ;   + 2| IP
    20                              <1>                                 ; BP+ 0| BP
    21                              <1>                                 ; -----+-------------
    22                              <1> 
    23                              <1>     ;; レジスタの保存
    24 0000016C 50                  <1>     push	ax
    25 0000016D 53                  <1> 	push	bx
    26 0000016E 51                  <1> 	push	cx
    27 0000016F 52                  <1> 	push	dx
    28 00000170 56                  <1> 	push	si
    29 00000171 57                  <1> 	push	di
    30                              <1> 
    31                              <1>     ;; 引数の取得
    32 00000172 8B4604              <1>     mov		ax, [bp + 4]					; val  = 数値;
    33 00000175 8B7606              <1> 	mov		si, [bp + 6]					; dst  = バッファアドレス;
    34 00000178 8B4E08              <1> 	mov		cx, [bp + 8]					; size = 残りバッファサイズ;
    35                              <1> 
    36 0000017B 89F7                <1> 	mov		di, si							; // バッファの最後尾
    37 0000017D 01CF                <1> 	add		di, cx							; dst  = &dst[size - 1];
    38 0000017F 4F                  <1> 	dec		di								;
    39                              <1> 
    40 00000180 8B5E0C              <1> 	mov		bx, [bp +12]					; flags = オプション;
    41                              <1> 
    42                              <1>     ;; 符号付き判定
    43 00000183 F7C30100            <1>     test bx, 0b0001             ; if (flags & 0b01) {
    44                              <1>                                 ;   if (val > 0) {
    45                              <1>     .10Q:                       ;     flag |= 2;
    46 00000187 7408                <1>     je .10E                     ;   }
    47 00000189 83F800              <1>     cmp ax, 0                   ; }
    48                              <1> 
    49                              <1>     .12Q:
    50 0000018C 7D03                <1>     jge .12E
    51 0000018E 83CB02              <1>     or bx, 0b0010
    52                              <1> 
    53                              <1>     .12E:
    54                              <1>     .10E:
    55                              <1> 
    56                              <1>     ;; 符号出力判定
    57 00000191 F7C30200            <1>     test bx, 0b0010             ; if (flag & 0x02) {
    58                              <1>                                 ;   if (val > 0) {
    59                              <1>     .20Q:                       ;      val *= -1;
    60 00000195 7410                <1>     je .20E                     ;      *dst = '-';
    61 00000197 83F800              <1>     cmp ax, 0                   ;   } else {
    62                              <1>                                 ;      *dst = '+';
    63                              <1>     .22Q:                       ;   }
    64 0000019A 7D07                <1>     jge .22F                    ;
    65 0000019C F7D8                <1>     neg ax                      ;   size--;
    66 0000019E C6042D              <1>     mov [si], byte '-'          ; }
    67 000001A1 EB03                <1>     jmp .22E
    68                              <1> 
    69                              <1>     .22F:
    70 000001A3 C6042B              <1>     mov [si], byte '+'
    71                              <1> 
    72                              <1>     .22E:
    73 000001A6 49                  <1>     dec cx
    74                              <1> 
    75                              <1>     .20E:
    76                              <1> 
    77                              <1>     ;; ASCII 変換
    78 000001A7 8B5E0A              <1>     mov bx, [bp + 10]           ; BX = radix
    79                              <1>                                 ;
    80                              <1>     .30L:                       ; do {
    81 000001AA BA0000              <1>     mov dx, 0                   ;  DX = DX:AX % radix;
    82 000001AD F7F3                <1>     div bx                      ;  AX = DX:AX / radix;
    83                              <1>                                 ;
    84 000001AF 89D6                <1>     mov si, dx                  ;
    85 000001B1 8A94[D901]          <1>     mov dl, byte [.ascii + si]  ;  DL = ASCII[DX];
    86 000001B5 8815                <1>     mov [di], dl                ;  *dst = DL;
    87 000001B7 4F                  <1>     dec di                      ;   dst--;
    88                              <1>                                 ;
    89 000001B8 83F800              <1>     cmp ax, 0                   ;
    90 000001BB E0ED                <1>     loopnz .30L                 ; } while (AX);
    91                              <1> 
    92                              <1>     .30E:
    93                              <1> 
    94                              <1>     ;; 空白を埋める
    95 000001BD 83F900              <1>     cmp cx, 0                   ; if (size) {
    96                              <1>                                 ;
    97                              <1>     .40Q:                       ;
    98 000001C0 740D                <1>     je .40E                     ;
    99 000001C2 B020                <1>     mov al, ' '                 ;    AL = ' '
   100 000001C4 837E0C04            <1>     cmp [bp + 12], word 0b0100  ;    if (flag & 0x04) {
   101                              <1>                                 ;
   102                              <1>     .42Q:                       ;
   103 000001C8 7502                <1>     jne .42E                    ;
   104 000001CA B030                <1>     mov al, '0'                 ;       AL = '0';
   105                              <1>                                 ;    }
   106                              <1>     .42E:                       ;
   107 000001CC FD                  <1>     std                         ;    DF = 1
   108 000001CD F3AA                <1>     rep stosb                   ;    while (--cx) *DI-- = ' ';
   109                              <1>                                 ;
   110                              <1>     .40E:                       ; }
   111                              <1> 
   112                              <1>     ;; レジスタの復帰
   113 000001CF 5F                  <1> 	pop		di
   114 000001D0 5E                  <1> 	pop		si
   115 000001D1 5A                  <1> 	pop		dx
   116 000001D2 59                  <1> 	pop		cx
   117 000001D3 5B                  <1> 	pop		bx
   118 000001D4 58                  <1> 	pop		ax
   119                              <1> 
   120                              <1>     ;; スタックフレームの破棄
   121 000001D5 89EC                <1> 	mov		sp, bp
   122 000001D7 5D                  <1> 	pop		bp
   123                              <1> 
   124 000001D8 C3                  <1> 	ret
   125                              <1> 
   126                              <1> 
   127 000001D9 303132333435363738- <1>     .ascii db "0123456789ABCDEF" ; 変換テーブル
   127 000001E2 39414243444546      <1>
    65                                  ;;;
    66                                  ;;; ブートフラグ(先頭 512 バイトの終了)
    67                                  ;;;
    68 000001E9 00<rept>                    times 510 - ($ - $$) db 0x00
    69 000001FE 55AA                        db 0x55, 0xAA
